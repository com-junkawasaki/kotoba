// Example: If/Else Conditional
// Merkle DAG: example_program -> if_else_construct -> dsl_construction

{
  node: [
    { id: "cond", type: "Gt", properties: { inferred_type: "Bool" } },
    { id: "a", type: "Var", properties: { attrs: { name: "a" }, inferred_type: "Int" } },
    { id: "const_0", type: "Const", properties: { attrs: { value: 0 }, inferred_type: "Int" } },
    { id: "if", type: "If", properties: {} },
    { id: "bb_then", type: "Block", properties: { attrs: { name: "then" } } },
    { id: "bb_else", type: "Block", properties: { attrs: { name: "else" } } },
    { id: "bb_join", type: "Block", properties: { attrs: { name: "join" } } },
    { id: "assign_then", type: "Assign", properties: { attrs: { var: "x" } } },
    { id: "const_100", type: "Const", properties: { attrs: { value: 100 }, inferred_type: "Int" } },
    { id: "assign_else", type: "Assign", properties: { attrs: { var: "x" } } },
    { id: "const_200", type: "Const", properties: { attrs: { value: 200 }, inferred_type: "Int" } },
    { id: "phi_x", type: "Phi", properties: { inferred_type: "Int" } },
    { id: "result_var", type: "Var", properties: { attrs: { name: "x_result" } } }
  ],

  edge: [
    { id: "s_if_cond", type: "child", layer: "syntax" },
    { id: "s_if_then", type: "child", layer: "syntax" },
    { id: "s_if_else", type: "child", layer: "syntax" },
    { id: "s_cond_a", type: "child", layer: "syntax" },
    { id: "s_cond_0", type: "child", layer: "syntax" },
    { id: "s_then_assign", type: "child", layer: "syntax" },
    { id: "s_else_assign", type: "child", layer: "syntax" },
    { id: "s_assign_then_val", type: "child", layer: "syntax" },
    { id: "s_assign_else_val", type: "child", layer: "syntax" },
    { id: "d_cond_a", type: "use", layer: "data" },
    { id: "d_cond_0", type: "use", layer: "data" },
    { id: "d_assign_then", type: "def", layer: "data" },
    { id: "d_assign_else", type: "def", layer: "data" },
    { id: "d_phi_in1", type: "arg", layer: "data" },
    { id: "d_phi_in2", type: "arg", layer: "data" },
    { id: "d_phi_out", type: "result", layer: "data" },
    { id: "c_if_then", type: "edge", layer: "control", properties: { condition: true } },
    { id: "c_if_else", type: "edge", layer: "control", properties: { condition: false } },
    { id: "c_then_join", type: "edge", layer: "control" },
    { id: "c_else_join", type: "edge", layer: "control" }
  ],

  incidence: [
    { node: "if", edge: "s_if_cond", type: "parent" },
    { node: "cond", edge: "s_if_cond", type: "child", properties: { pos: 0 } },
    { node: "if", edge: "s_if_then", type: "parent" },
    { node: "bb_then", edge: "s_if_then", type: "child", properties: { pos: 1 } },
    { node: "if", edge: "s_if_else", type: "parent" },
    { node: "bb_else", edge: "s_if_else", type: "child", properties: { pos: 2 } },
    { node: "cond", edge: "s_cond_a", type: "parent" },
    { node: "a", edge: "s_cond_a", type: "child", properties: { pos: 0 } },
    { node: "cond", edge: "s_cond_0", type: "parent" },
    { node: "const_0", edge: "s_cond_0", type: "child", properties: { pos: 1 } },
    { node: "bb_then", edge: "s_then_assign", type: "parent" },
    { node: "assign_then", edge: "s_then_assign", type: "child", properties: { pos: 0 } },
    { node: "bb_else", edge: "s_else_assign", type: "parent" },
    { node: "assign_else", edge: "s_else_assign", type: "child", properties: { pos: 0 } },
    { node: "assign_then", edge: "s_assign_then_val", type: "parent" },
    { node: "const_100", edge: "s_assign_then_val", type: "child", properties: { pos: 0 } },
    { node: "assign_else", edge: "s_assign_else_val", type: "parent" },
    { node: "const_200", edge: "s_assign_else_val", type: "child", properties: { pos: 0 } },
    { node: "a", edge: "d_cond_a", type: "source" },
    { node: "cond", edge: "d_cond_a", type: "target" },
    { node: "const_0", edge: "d_cond_0", type: "source" },
    { node: "cond", edge: "d_cond_0", type: "target" },
    { node: "const_100", edge: "d_assign_then", type: "source" },
    { node: "assign_then", edge: "d_assign_then", type: "target" },
    { node: "const_200", edge: "d_assign_else", type: "source" },
    { node: "assign_else", edge: "d_assign_else", type: "target" },
    { node: "assign_then", edge: "d_phi_in1", type: "source", properties: { pos: 0 } },
    { node: "phi_x", edge: "d_phi_in1", type: "target" },
    { node: "assign_else", edge: "d_phi_in2", type: "source", properties: { pos: 1 } },
    { node: "phi_x", edge: "d_phi_in2", type: "target" },
    { node: "phi_x", edge: "d_phi_out", type: "source" },
    { node: "result_var", edge: "d_phi_out", type: "target" },
    { node: "if", edge: "c_if_then", type: "from" },
    { node: "bb_then", edge: "c_if_then", type: "to" },
    { node: "if", edge: "c_if_else", type: "from" },
    { node: "bb_else", edge: "c_if_else", type: "to" },
    { node: "bb_then", edge: "c_then_join", type: "from" },
    { node: "bb_join", edge: "c_then_join", type: "to" },
    { node: "bb_else", edge: "c_else_join", type: "from" },
    { node: "bb_join", edge: "c_else_join", type: "to" }
  ]
}
