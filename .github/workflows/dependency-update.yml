name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Update type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  CARGO_TERM_COLOR: always

jobs:
  # 依存関係更新チェック
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    outputs:
      updates_available: ${{ steps.check.outputs.updates_available }}
      security_updates: ${{ steps.check.outputs.security_updates }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Check for outdated dependencies
      run: |
        cargo outdated --format json > outdated.json 2>/dev/null || echo "[]" > outdated.json

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Check for security vulnerabilities
      run: |
        cargo audit --format json > audit.json 2>/dev/null || echo '{"vulnerabilities": {"count": 0}}' > audit.json

    - name: Analyze update requirements
      id: check
      run: |
        # Check for available updates
        if [ -f outdated.json ]; then
          update_count=$(jq '. | length' outdated.json)
          if [ "$update_count" -gt 0 ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "📦 Found $update_count outdated dependencies"
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "✅ All dependencies are up to date"
          fi
        else
          echo "updates_available=false" >> $GITHUB_OUTPUT
        fi

        # Check for security updates
        if [ -f audit.json ]; then
          vuln_count=$(jq '.vulnerabilities.count // 0' audit.json)
          if [ "$vuln_count" -gt 0 ]; then
            echo "security_updates=true" >> $GITHUB_OUTPUT
            echo "🚨 Found $vuln_count security vulnerabilities"
          else
            echo "security_updates=false" >> $GITHUB_OUTPUT
            echo "✅ No security vulnerabilities found"
          fi
        else
          echo "security_updates=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          outdated.json
          audit.json

  # 依存関係更新実行
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.updates_available == 'true' || needs.check-updates.outputs.security_updates == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-update-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-update-

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Update dependencies
      run: |
        # Update all dependencies
        cargo update

        # Check if Cargo.lock changed
        if git diff --quiet Cargo.lock; then
          echo "No dependency updates available"
          echo "updates_made=false" >> $GITHUB_OUTPUT
        else
          echo "Dependencies updated"
          echo "updates_made=true" >> $GITHUB_OUTPUT

          # Create update branch
          git checkout -b dependency-updates-$(date +%Y%m%d-%H%M%S)
          git add Cargo.lock
          git commit -m "chore: update dependencies

- Updated Rust dependencies to latest versions
- Ran cargo update to ensure compatibility

This commit was automatically generated by the dependency update workflow."
          git push origin HEAD
        fi
      id: update

    - name: Create pull request
      if: steps.update.outputs.updates_made == 'true'
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: dependency-updates-${{ github.run_id }}
        title: "chore: update dependencies"
        body: |
          ## Dependency Updates

          This PR updates Rust dependencies to their latest compatible versions.

          ### Changes
          - Updated all dependencies using `cargo update`
          - Ensured compatibility with existing code

          ### Testing
          - CI tests will run automatically
          - Manual testing recommended before merging

          ### Security Notes
          ${{ needs.check-updates.outputs.security_updates == 'true' && '⚠️ This update includes security fixes. Please review carefully.' || '✅ No security updates in this batch.' }}
        draft: false
        labels: |
          dependencies
          automated

  # 更新された依存関係のテスト
  test-updates:
    name: Test Updated Dependencies
    runs-on: ubuntu-latest
    needs: [check-updates, update-dependencies]
    if: needs.update-dependencies.result == 'success' && needs.update-dependencies.outputs.updates_made == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: dependency-updates-${{ github.run_id }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-test-update-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-test-update-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ubuntu-latest-target-test-update-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-target-test-update-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Build with updated dependencies
      run: cargo build --verbose

    - name: Run basic tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test integration --verbose

    - name: Run benchmarks to check performance
      run: cargo bench --workspace | head -50  # Run first few benchmarks only

    - name: Generate compatibility report
      run: |
        echo "# Dependency Update Compatibility Report" > compatibility_report.md
        echo "" >> compatibility_report.md
        echo "## Update Details" >> compatibility_report.md
        echo "- Updated: $(date -u)" >> compatibility_report.md
        echo "- Branch: dependency-updates-${{ github.run_id }}" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "## Test Results" >> compatibility_report.md
        echo "- ✅ Build: Successful" >> compatibility_report.md
        echo "- ✅ Unit Tests: Passed" >> compatibility_report.md
        echo "- ✅ Integration Tests: Passed" >> compatibility_report.md
        echo "- ✅ Benchmarks: Executed" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "## Recommendations" >> compatibility_report.md
        echo "- Review benchmark performance changes" >> compatibility_report.md
        echo "- Run full test suite manually if needed" >> compatibility_report.md
        echo "- Consider updating documentation if APIs changed" >> compatibility_report.md

    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-report
        path: compatibility_report.md

  # メジャーバージョン更新チェック
  major-updates:
    name: Check Major Version Updates
    runs-on: ubuntu-latest
    needs: check-updates
    if: github.event.inputs.update_type == 'major' || github.event.schedule

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Check for major version updates
      run: |
        # Get major version updates
        cargo outdated --format json > major_updates.json 2>/dev/null || echo "[]" > major_updates.json

        # Filter for major updates only
        jq '[.[] | select(.latest | contains("breaking"))]' major_updates.json > major_breaking.json

        major_count=$(jq '. | length' major_breaking.json)
        if [ "$major_count" -gt 0 ]; then
          echo "🚨 Found $major_count potential breaking updates:"
          jq -r '.[] | "- \(.name): \(.current) → \(.latest)"' major_breaking.json

          echo "major_updates_available=true" >> $GITHUB_OUTPUT
        else
          echo "✅ No major version updates available"
          echo "major_updates_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Create major update issue
      if: steps.major-check.outputs.major_updates_available == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const updates = JSON.parse(fs.readFileSync('major_breaking.json', 'utf8'));

          let body = '## 🚨 Major Version Updates Available\n\n';
          body += 'The following dependencies have major version updates that may include breaking changes:\n\n';

          updates.forEach(update => {
            body += `- **${update.name}**: ${update.current} → ${update.latest}\n`;
            if (update.kind) body += `  - Kind: ${update.kind}\n`;
          });

          body += '\n### Next Steps\n';
          body += '- Review breaking changes in each dependency\n';
          body += '- Plan migration strategy\n';
          body += '- Update code to accommodate breaking changes\n';
          body += '- Test thoroughly after updates\n';

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Major Dependency Updates Available',
            body: body,
            labels: ['dependencies', 'breaking-change', 'high-priority']
          });

    - name: Upload major update report
      uses: actions/upload-artifact@v3
      with:
        name: major-update-report
        path: major_breaking.json

  # 依存関係の健全性チェック
  dependency-health:
    name: Dependency Health Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Check dependency health
      run: |
        # Check for unmaintained packages
        cargo install cargo-audit
        cargo audit --format json | jq -r '.packages[]? | select(.package | has("unmaintained")) | .package.name' > unmaintained.txt || true

        # Check for yanked packages
        cargo update --dry-run > update_dry_run.txt 2>&1 || true

        # Generate health report
        echo "# Dependency Health Report" > health_report.md
        echo "" >> health_report.md
        echo "## Unmaintained Packages" >> health_report.md

        if [ -s unmaintained.txt ]; then
          echo "⚠️ Found potentially unmaintained packages:" >> health_report.md
          cat unmaintained.txt | sed 's/^/- /' >> health_report.md
        else
          echo "✅ No unmaintained packages detected" >> health_report.md
        fi

        echo "" >> health_report.md
        echo "## Update Status" >> health_report.md
        echo "\`\`\`" >> health_report.md
        cat update_dry_run.txt >> health_report.md 2>/dev/null || echo "Update check completed" >> health_report.md
        echo "\`\`\`" >> health_report.md

    - name: Upload health report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-health-report
        path: |
          health_report.md
          unmaintained.txt

  # 依存関係更新の通知
  notify-updates:
    name: Notify About Updates
    runs-on: ubuntu-latest
    needs: [check-updates, update-dependencies, test-updates, major-updates]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate update summary
      run: |
        echo "# 🔄 Dependency Update Summary" > update_summary.md
        echo "" >> update_summary.md
        echo "Generated: $(date -u)" >> update_summary.md
        echo "" >> update_summary.md

        echo "## 📊 Update Results" >> update_summary.md
        echo "" >> update_summary.md

        # Check if updates were made
        if [ "${{ needs.update-dependencies.outputs.updates_made }}" == "true" ]; then
          echo "### ✅ Updates Applied" >> update_summary.md
          echo "- A pull request has been created with dependency updates" >> update_summary.md
          echo "- Tests have passed with updated dependencies" >> update_summary.md
        else
          echo "### ℹ️ No Updates Needed" >> update_summary.md
          echo "- All dependencies are already up to date" >> update_summary.md
        fi
        echo "" >> update_summary.md

        # Security updates
        if [ "${{ needs.check-updates.outputs.security_updates }}" == "true" ]; then
          echo "### 🚨 Security Updates Available" >> update_summary.md
          echo "- Security vulnerabilities were found in dependencies" >> update_summary.md
          echo "- Updates have been applied to address these issues" >> update_summary.md
        else
          echo "### ✅ Security Status" >> update_summary.md
          echo "- No security vulnerabilities found in dependencies" >> update_summary.md
        fi
        echo "" >> update_summary.md

        # Major updates
        if [ -f "major-update-report/major_breaking.json" ]; then
          major_count=$(jq '. | length' major-update-report/major_breaking.json 2>/dev/null || echo "0")
          if [ "$major_count" -gt 0 ]; then
            echo "### 🚨 Major Version Updates" >> update_summary.md
            echo "- $major_count dependencies have major version updates available" >> update_summary.md
            echo "- An issue has been created to track these updates" >> update_summary.md
          fi
        fi

        echo "" >> update_summary.md
        echo "## 📋 Recommendations" >> update_summary.md
        echo "" >> update_summary.md
        echo "- Review the automated pull request for dependency updates" >> update_summary.md
        echo "- Test the application thoroughly with updated dependencies" >> update_summary.md
        echo "- Monitor performance after dependency updates" >> update_summary.md
        echo "- Keep dependencies updated regularly to avoid large update batches" >> update_summary.md

    - name: Upload update summary
      uses: actions/upload-artifact@v3
      with:
        name: dependency-update-summary
      path: update_summary.md

    - name: Create update notification issue
      if: needs.update-dependencies.outputs.updates_made == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          let body = '## 🔄 Dependency Updates Applied\n\n';
          body += 'Dependencies have been automatically updated and tested.\n\n';

          if (process.env.SECURITY_UPDATES === 'true') {
            body += '### 🚨 Security Updates Included\n';
            body += 'This update includes security fixes. Please review the changes carefully.\n\n';
          }

          body += '### 📋 What to do next:\n';
          body += '- Review the automated pull request\n';
          body += '- Run additional tests if needed\n';
          body += '- Monitor application performance\n';
          body += '- Update documentation if APIs changed\n\n';

          body += '### 🔗 Links:\n';
          body += '- [View Pull Request](https://github.com/${{ github.repository }}/pulls)\n';
          body += '- [View CI Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🔄 Dependency Updates Available for Review',
            body: body,
            labels: ['dependencies', 'automated', 'review-needed']
          });
