name: Deploy Documentation Site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'docs/**'
      - 'crates/kotoba-ssg/src/assets/**'
      - 'dag.jsonnet'
      - '.github/workflows/static.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Build Kotoba SSG
        run: cargo build --release --bin kotoba-ssg

      - name: Build documentation site
        run: |
          # Create build directory
          mkdir -p build/site

          # Build documentation using SSG
          echo "Building documentation with Kotoba SSG..."

          # For now, copy static files as placeholder
          # TODO: Replace with actual SSG binary when implemented
          cp -r docs/* build/site/ 2>/dev/null || true
          cp -r crates/kotoba-ssg/src/assets/* build/site/ 2>/dev/null || true

          # Create basic index.html if it doesn't exist
          if [ ! -f "build/site/index.html" ]; then
            cat > build/site/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kotoba Documentation</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
        .hero { text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 4rem 2rem; border-radius: 8px; margin-bottom: 2rem; }
        .hero h1 { margin: 0 0 1rem 0; font-size: 2.5rem; }
        .hero p { margin: 0; font-size: 1.2rem; opacity: 0.9; }
    </style>
</head>
<body>
    <div class="hero">
        <h1>ðŸš€ Kotoba Documentation</h1>
        <p>Documentation is being built with the new SSG system</p>
    </div>
    <p>This site is generated from Markdown sources in the <code>docs/</code> directory using the Kotoba Static Site Generator.</p>
    <h2>ðŸ“š Documentation Sections</h2>
    <ul>
        <li><a href="README.html">Overview</a></li>
        <li><a href="api/README.html">API Documentation</a></li>
        <li><a href="tutorials/getting-started.html">Getting Started</a></li>
    </ul>
</body>
</html>
EOF
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build/site'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
