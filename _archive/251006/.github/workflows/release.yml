name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # リリースビルド
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-release-${{ matrix.target }}-

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config musl-tools
        # Install cross-compilation tools for musl
        rustup target add x86_64-unknown-linux-musl

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl pkg-config

    - name: Build optimized binary
      run: |
        cargo build --release --target ${{ matrix.target }} --bin kotoba
        cargo build --release --target ${{ matrix.target }}

    - name: Build with musl (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y musl-tools
        rustup target add x86_64-unknown-linux-musl
        cargo build --release --target x86_64-unknown-linux-musl --bin kotoba

    - name: Package release
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a ../../../kotoba-${{ github.ref_name }}-${{ matrix.name }}.zip kotoba.exe
        else
          tar czf ../../../kotoba-${{ github.ref_name }}-${{ matrix.name }}.tar.gz kotoba
        fi

        # Create musl package for Linux
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          cd ../../x86_64-unknown-linux-musl/release
          tar czf ../../../kotoba-${{ github.ref_name }}-linux-musl-x64.tar.gz kotoba
        fi

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kotoba-${{ github.ref_name }}-${{ matrix.name }}
        path: |
          kotoba-${{ github.ref_name }}-${{ matrix.name }}.tar.gz
          kotoba-${{ github.ref_name }}-${{ matrix.name }}.zip
          kotoba-${{ github.ref_name }}-linux-musl-x64.tar.gz

  # クロスプラットフォームテスト
  cross-platform-test:
    name: Cross-Platform Test
    runs-on: ubuntu-latest
    needs: build-release

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-cross-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-cross-

    - name: Install cross
      run: cargo install cross

    - name: Test on different targets
      run: |
        # Test on ARM64 Linux
        cross test --target aarch64-unknown-linux-gnu --lib --release

        # Test on ARM Linux
        cross test --target armv7-unknown-linux-gnueabihf --lib --release

    - name: Upload cross-platform test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cross-platform-test-results
        path: target/*/debug/deps/*

  # パフォーマンスベンチマーク
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-release

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Linux release
      uses: actions/download-artifact@v3
      with:
        name: kotoba-${{ github.ref_name }}-linux-x64
        path: release/

    - name: Extract release
      run: |
        cd release
        tar xzf kotoba-${{ github.ref_name }}-linux-x64.tar.gz

    - name: Run performance benchmarks
      run: |
        cd release
        export PATH="$PWD:$PATH"

        # Run basic benchmarks
        timeout 300 kotoba --version || true

        # Run load tests for performance validation
        # This would be more comprehensive in practice

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: release-benchmark-results
        path: release/benchmark_*.txt

  # リリース作成
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-release, cross-platform-test, performance-benchmark]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all release artifacts
      uses: actions/download-artifact@v3

    - name: Generate changelog
      run: |
        # Generate changelog from git history
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## ${{ github.ref_name }}" >> CHANGELOG.md
        echo "" >> CHANGELOG.md

        # Get commits since last tag
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> CHANGELOG.md || echo "- Release ${{ github.ref_name }}" >> CHANGELOG.md

        echo "" >> CHANGELOG.md
        echo "### Downloads" >> CHANGELOG.md
        echo "- Linux x64: kotoba-${{ github.ref_name }}-linux-x64.tar.gz" >> CHANGELOG.md
        echo "- macOS x64: kotoba-${{ github.ref_name }}-macos-x64.tar.gz" >> CHANGELOG.md
        echo "- macOS ARM64: kotoba-${{ github.ref_name }}-macos-arm64.tar.gz" >> CHANGELOG.md
        echo "- Windows x64: kotoba-${{ github.ref_name }}-windows-x64.zip" >> CHANGELOG.md
        echo "- Linux MUSL x64: kotoba-${{ github.ref_name }}-linux-musl-x64.tar.gz" >> CHANGELOG.md

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          kotoba-*/kotoba-${{ github.ref_name }}-*.tar.gz
          kotoba-*/kotoba-${{ github.ref_name }}-*.zip
        body_path: CHANGELOG.md
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dockerイメージビルドと公開
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          kotoba/kotoba
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Homebrewリリース
  homebrew-release:
    name: Homebrew Release
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout homebrew-tap repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/homebrew-tap
        path: homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

    - name: Update Homebrew formula
      run: |
        cd homebrew-tap
        # Update version and SHA256 in Formula/kotoba.rb
        sed -i "s/version \".*\"/version \"${GITHUB_REF#refs/tags/v}\"/g" Formula/kotoba.rb

        # Calculate SHA256 of the release archive
        curl -sL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/kotoba-${{ github.ref_name }}-linux-x64.tar.gz | sha256sum | cut -d' ' -f1 > sha256.txt

        sed -i "s/sha256 \".*\"/sha256 \"$(cat sha256.txt)\"/g" Formula/kotoba.rb

        git add Formula/kotoba.rb
        git commit -m "Update kotoba to ${{ github.ref_name }}"
        git push

  # Crates.io公開
  crates-release:
    name: Crates.io Release
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-crates-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-crates-

    - name: Publish to crates.io
      run: |
        # Publish workspace crates in dependency order
        cargo publish --package kotoba-core
        sleep 30
        cargo publish --package kotoba-errors
        sleep 30
        cargo publish --package kotoba-cid
        sleep 30
        cargo publish --package kotoba-jsonnet
        sleep 30
        cargo publish --package kotoba-graph
        sleep 30
        cargo publish --package kotoba-storage
        sleep 30
        cargo publish --package kotoba-db-core
        sleep 30
        cargo publish --package kotoba-db-engine-memory
        sleep 30
        cargo publish --package kotoba-db-engine-lsm
        sleep 30
        cargo publish --package kotoba-db
        sleep 30
        # Publish main crate last
        cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  # リリース検証
  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    needs: [create-release, docker-release, crates-release]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate release artifacts
      run: |
        # Check if all expected artifacts exist
        expected_artifacts=(
          "kotoba-${GITHUB_REF#refs/tags/}-linux-x64.tar.gz"
          "kotoba-${GITHUB_REF#refs/tags/}-macos-x64.tar.gz"
          "kotoba-${GITHUB_REF#refs/tags/}-macos-arm64.tar.gz"
          "kotoba-${GITHUB_REF#refs/tags/}-windows-x64.zip"
        )

        for artifact in "${expected_artifacts[@]}"; do
          if [ ! -f "$artifact" ]; then
            echo "❌ Missing artifact: $artifact"
            exit 1
          fi
        done

        echo "✅ All release artifacts present"

    - name: Test published crate
      run: |
        # Test that published crate can be downloaded and built
        cargo install kotoba --version ${{ github.ref_name#v }}
        kotoba --version

    - name: Validate Docker image
      run: |
        # Test Docker image functionality
        docker run --rm kotoba/kotoba:${GITHUB_REF#refs/tags/v} --version
        docker run --rm ghcr.io/${{ github.repository }}:${GITHUB_REF#refs/tags/v} --version

    - name: Generate release validation report
      run: |
        echo "# Release Validation Report" > release_validation.md
        echo "" >> release_validation.md
        echo "## Release: ${{ github.ref_name }}" >> release_validation.md
        echo "" >> release_validation.md
        echo "### ✅ Validation Results" >> release_validation.md
        echo "- All artifacts present and downloadable" >> release_validation.md
        echo "- Crate published successfully" >> release_validation.md
        echo "- Docker images functional" >> release_validation.md
        echo "- Cross-platform builds successful" >> release_validation.md
        echo "" >> release_validation.md
        echo "### 📦 Release Artifacts" >> release_validation.md
        ls -la kotoba-*.tar.gz kotoba-*.zip 2>/dev/null || echo "Artifacts in release"

    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: release-validation-report
        path: release_validation.md
