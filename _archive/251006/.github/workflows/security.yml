name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  workflow_dispatch:

jobs:
  # ‰æùÂ≠òÈñ¢‰øÇËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥
  audit:
    name: Dependency Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-audit-

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo-audit
      run: cargo audit --format json --output audit-report.json || true

    - name: Process audit results
      run: |
        if [ -f audit-report.json ]; then
          # Check for vulnerabilities
          vulnerabilities=$(jq '.vulnerabilities.count' audit-report.json 2>/dev/null || echo "0")
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "üö® Security vulnerabilities found: $vulnerabilities"
            jq '.vulnerabilities.list[] | {id: .id, package: .package.name, severity: .severity}' audit-report.json
            echo "security_vulnerabilities=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No security vulnerabilities found"
            echo "security_vulnerabilities=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå Audit report not generated"
          echo "security_vulnerabilities=unknown" >> $GITHUB_OUTPUT
        fi
      id: audit-results

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-report
        path: audit-report.json

  # ‰æùÂ≠òÈñ¢‰øÇ„É©„Ç§„Çª„É≥„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
  licenses:
    name: License Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run license check
      run: |
        cargo deny check licenses --format json --output license-report.json || true

    - name: Check for forbidden licenses
      run: |
        if [ -f license-report.json ]; then
          forbidden=$(jq '.errors[]? | select(.kind == "license") | .message' license-report.json 2>/dev/null | wc -l)
          if [ "$forbidden" -gt 0 ]; then
            echo "üö® Forbidden licenses found:"
            jq '.errors[]? | select(.kind == "license") | .message' license-report.json
            echo "license_violations=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No forbidden licenses found"
            echo "license_violations=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå License report not generated"
          echo "license_violations=unknown" >> $GITHUB_OUTPUT
        fi
      id: license-results

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: license-report.json

  # „ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # „Ç∑„Éº„ÇØ„É¨„ÉÉ„ÉàÊºèÊ¥©„ÉÅ„Çß„ÉÉ„ÇØ
  secrets:
    name: Secret Leakage Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # „Ç≥„É≥„ÉÜ„Éä„Ç§„É°„Éº„Ç∏ËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥
  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t kotoba:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'kotoba:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codecov/codecov-action@v3
      if: always()
      with:
        file: trivy-results.sarif
        flags: trivy
        name: trivy

  # ‰æùÂ≠òÈñ¢‰øÇ„ÅÆÊú™‰ΩøÁî®„ÉÅ„Çß„ÉÉ„ÇØ
  unused-deps:
    name: Unused Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-udeps
      run: cargo install cargo-udeps

    - name: Run unused dependencies check
      run: |
        cargo +nightly udeps --workspace --output json > udeps-report.json 2>/dev/null || true

    - name: Analyze unused dependencies
      run: |
        if [ -f udeps-report.json ]; then
          unused_count=$(jq '.unused_deps | length' udeps-report.json 2>/dev/null || echo "0")
          if [ "$unused_count" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $unused_count unused dependencies:"
            jq -r '.unused_deps[] | "- \(.name) (\(.manifest_path))"' udeps-report.json
            echo "unused_deps_found=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No unused dependencies found"
            echo "unused_deps_found=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå Unused dependencies check failed"
          echo "unused_deps_found=unknown" >> $GITHUB_OUTPUT
        fi
      id: udeps-results

    - name: Upload unused deps report
      uses: actions/upload-artifact@v3
      with:
        name: unused-deps-report
        path: udeps-report.json

  # SBOMÁîüÊàê
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-cyclonedx
      run: cargo install cargo-cyclonedx

    - name: Generate SBOM
      run: cargo cyclonedx --format json --output bom.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: bom.json

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É¨„Éù„Éº„ÉàÁîüÊàê
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [audit, licenses, codeql, secrets, container-scan, unused-deps, sbom]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all security reports
      uses: actions/download-artifact@v3

    - name: Generate comprehensive security report
      run: |
        echo "# üîí KotobaDB Security Report" > security_report.md
        echo "" >> security_report.md
        echo "Generated: $(date -u)" >> security_report.md
        echo "" >> security_report.md

        echo "## üìä Security Scan Results" >> security_report.md
        echo "" >> security_report.md

        # Audit results
        if [ -f "security-audit-report/audit-report.json" ]; then
          vulnerabilities=$(jq '.vulnerabilities.count // 0' security-audit-report/audit-report.json)
          echo "### Dependency Vulnerabilities" >> security_report.md
          echo "- Vulnerabilities found: $vulnerabilities" >> security_report.md
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "- **Status: üö® ACTION REQUIRED**" >> security_report.md
            jq -r '.vulnerabilities.list[]? | "- \(.id): \(.package.name) - \(.severity)"' security-audit-report/audit-report.json >> security_report.md
          else
            echo "- **Status: ‚úÖ PASSED**" >> security_report.md
          fi
          echo "" >> security_report.md
        fi

        # License results
        if [ -f "license-report/license-report.json" ]; then
          violations=$(jq '.errors | length' license-report/license-report.json)
          echo "### License Compliance" >> security_report.md
          echo "- License violations: $violations" >> security_report.md
          if [ "$violations" -gt 0 ]; then
            echo "- **Status: üö® ACTION REQUIRED**" >> security_report.md
          else
            echo "- **Status: ‚úÖ PASSED**" >> security_report.md
          fi
          echo "" >> security_report.md
        fi

        # CodeQL results will be in the security tab
        echo "### Static Analysis (CodeQL)" >> security_report.md
        echo "- Status: See Security tab for detailed results" >> security_report.md
        echo "" >> security_report.md

        # Container scan results
        echo "### Container Image Security" >> security_report.md
        echo "- Status: See Security tab for Trivy scan results" >> security_report.md
        echo "" >> security_report.md

        # Unused dependencies
        if [ -f "unused-deps-report/udeps-report.json" ]; then
          unused=$(jq '.unused_deps | length // 0' unused-deps-report/udeps-report.json)
          echo "### Unused Dependencies" >> security_report.md
          echo "- Unused dependencies: $unused" >> security_report.md
          if [ "$unused" -gt 0 ]; then
            echo "- **Status: ‚ö†Ô∏è REVIEW NEEDED**" >> security_report.md
          else
            echo "- **Status: ‚úÖ PASSED**" >> security_report.md
          fi
          echo "" >> security_report.md
        fi

        echo "## üõ°Ô∏è Security Recommendations" >> security_report.md
        echo "" >> security_report.md

        # Generate recommendations based on results
        if [ "$vulnerabilities" -gt 0 ]; then
          echo "### High Priority" >> security_report.md
          echo "- Update vulnerable dependencies immediately" >> security_report.md
          echo "- Review security advisories for affected packages" >> security_report.md
          echo "" >> security_report.md
        fi

        if [ "$violations" -gt 0 ]; then
          echo "### License Compliance" >> security_report.md
          echo "- Review and replace forbidden licenses" >> security_report.md
          echo "- Consult legal team for license compatibility" >> security_report.md
          echo "" >> security_report.md
        fi

        echo "### General Recommendations" >> security_report.md
        echo "- Keep dependencies updated regularly" >> security_report.md
        echo "- Run security scans before major releases" >> security_report.md
        echo "- Monitor for new security advisories" >> security_report.md
        echo "- Review code for security best practices" >> security_report.md

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-security-report
        path: security_report.md

    - name: Security gate check
      run: |
        # Check if any critical security issues exist
        critical_issues=0

        if [ -f "security-audit-report/audit-report.json" ]; then
          vulnerabilities=$(jq '.vulnerabilities.count // 0' security-audit-report/audit-report.json)
          if [ "$vulnerabilities" -gt 0 ]; then
            critical_issues=$((critical_issues + 1))
          fi
        fi

        if [ -f "license-report/license-report.json" ]; then
          violations=$(jq '.errors | length // 0' license-report/license-report.json)
          if [ "$violations" -gt 0 ]; then
            critical_issues=$((critical_issues + 1))
          fi
        fi

        if [ "$critical_issues" -gt 0 ]; then
          echo "üö® Critical security issues found: $critical_issues"
          echo "Security gate: FAILED"
          exit 1
        else
          echo "‚úÖ Security gate passed"
        fi
