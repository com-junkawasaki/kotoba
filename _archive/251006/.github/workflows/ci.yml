name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 基本的なテストとビルド
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-${{ matrix.rust }}-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build project
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose --lib

    - name: Run doctests
      run: cargo test --doc

    - name: Test with all features
      run: cargo test --all-features

  # 統合テスト
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ubuntu-latest-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-target-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Run integration tests
      run: cargo test --test integration --verbose
      env:
        REDIS_URL: redis://localhost:6379

    - name: Run load tests (basic)
      run: |
        cargo build --release --bin load_test_runner
        timeout 60 ./target/release/load_test_runner workload ycsb-a 30 || true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          target/debug/deps/integration-*
          target/debug/deps/load-*

  # ベンチマーク実行
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ubuntu-latest-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-target-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Run benchmarks
      run: cargo bench --workspace

    - name: Run load test benchmarks
      run: |
        cargo build --release --bin load_test_runner
        mkdir -p benchmark_results
        timeout 120 ./target/release/load_test_runner scenario benchmarks > benchmark_results/load_test_output.txt || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          target/criterion/*
          benchmark_results/*

  # ファジングテスト
  fuzz-test:
    name: Fuzz Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-fuzz-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-fuzz-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ubuntu-latest-target-fuzz-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-target-fuzz-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Run fuzz tests (short)
      run: |
        cd tests/fuzz
        cargo fuzz run data_structures -- -max_total_time=30
        cargo fuzz run graph_operations -- -max_total_time=30
        cargo fuzz run transaction_operations -- -max_total_time=30

    - name: Upload fuzz artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: fuzz-artifacts
        path: |
          tests/fuzz/fuzz-artifacts/**

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-security-

    - name: Run cargo-audit
      run: |
        cargo install cargo-audit
        cargo audit

    - name: Run cargo-deny
      run: |
        cargo install cargo-deny
        cargo deny check

    - name: Run cargo-tarpaulin for coverage
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --workspace --out Xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  # パフォーマンス回帰テスト
  performance-regression:
    name: Performance Regression
    runs-on: ubuntu-latest
    needs: [test, benchmark]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-latest-cargo-regression-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-regression-

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ubuntu-latest-target-regression-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-target-regression-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Check for performance baseline
      run: |
        if [ -f "performance_baseline.json" ]; then
          echo "Baseline exists, running regression test"
          cargo build --release --bin load_test_runner
          ./target/release/load_test_runner regression compare
        else
          echo "No baseline found, creating one"
          cargo build --release --bin load_test_runner
          ./target/release/load_test_runner regression baseline
        fi

    - name: Upload regression results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-results
        path: |
          performance_baseline.json
          regression_analysis.json

  # 品質ゲート
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, integration-test, benchmark, fuzz-test, security]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check test results
      run: |
        # Check if all required jobs passed
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Unit tests failed"
          exit 1
        fi

        if [ "${{ needs.integration-test.result }}" != "success" ]; then
          echo "❌ Integration tests failed"
          exit 1
        fi

        if [ "${{ needs.security.result }}" != "success" ]; then
          echo "❌ Security scan failed"
          exit 1
        fi

        echo "✅ All quality gates passed"

    - name: Generate quality report
      run: |
        echo "# Quality Gate Report" > quality_report.md
        echo "" >> quality_report.md
        echo "## Test Results" >> quality_report.md
        echo "- Unit Tests: ${{ needs.test.result }}" >> quality_report.md
        echo "- Integration Tests: ${{ needs.integration-test.result }}" >> quality_report.md
        echo "- Benchmark Tests: ${{ needs.benchmark.result }}" >> quality_report.md
        echo "- Fuzz Tests: ${{ needs.fuzz-test.result }}" >> quality_report.md
        echo "- Security Scan: ${{ needs.security.result }}" >> quality_report.md
        echo "- Performance Regression: ${{ needs.performance-regression.result }}" >> quality_report.md
        echo "" >> quality_report.md
        echo "## Coverage" >> quality_report.md
        echo "- Code coverage report available in artifacts" >> quality_report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality_report.md

    - name: Quality gate check
      run: |
        # Final quality gate - fail if any critical test failed
        if [ "${{ needs.test.result }}" = "failure" ] || \
           [ "${{ needs.integration-test.result }}" = "failure" ] || \
           [ "${{ needs.security.result }}" = "failure" ]; then
          echo "🚨 Quality gate failed - blocking merge"
          exit 1
        else
          echo "🎉 Quality gate passed - ready for merge"
        fi