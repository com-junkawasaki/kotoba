{
  // 🎯 Kotoba言語で実装された包括的なウェブアプリケーション
  // このファイルはJsonnetだけで完全なウェブアプリを定義します

  config: {
    type: "comprehensive_web_app",
    name: "Kotoba Web App Demo",
    description: "Complete web application built entirely with Kotoba language",
    base_url: "https://example.com",
    version: "1.0.0",
  },

  // 🔧 アプリケーション設定
  app: {
    port: 3000,
    host: "127.0.0.1",
    cors_enabled: true,
    session_secret: "super-secret-key-change-in-production",
    rate_limit_requests: 100,
    rate_limit_window_seconds: 60,
  },

  // 📊 データモデル定義
  models: {
    users: {
      fields: {
        id: "integer primary key",
        username: "varchar(50) unique not null",
        email: "varchar(255) unique not null",
        password_hash: "varchar(255) not null",
        role: "varchar(20) default 'user'",
        created_at: "timestamp default current_timestamp",
        updated_at: "timestamp default current_timestamp",
      },
      relationships: {
        posts: "has_many",
        comments: "has_many",
      },
    },

    posts: {
      fields: {
        id: "integer primary key",
        title: "varchar(255) not null",
        content: "text",
        author_id: "integer references users(id)",
        published: "boolean default false",
        created_at: "timestamp default current_timestamp",
        updated_at: "timestamp default current_timestamp",
      },
      relationships: {
        author: "belongs_to users",
        comments: "has_many",
      },
    },

    comments: {
      fields: {
        id: "integer primary key",
        content: "text not null",
        post_id: "integer references posts(id)",
        author_id: "integer references users(id)",
        created_at: "timestamp default current_timestamp",
      },
      relationships: {
        post: "belongs_to posts",
        author: "belongs_to users",
      },
    },
  },

  // 🔐 認証・認可設定
  auth: {
    jwt_secret: "your-jwt-secret-key-here",
    jwt_expiration_hours: 24,
    bcrypt_cost: 12,
    session_timeout_minutes: 60,

    // パスワードポリシー
    password_policy: {
      min_length: 8,
      require_uppercase: true,
      require_lowercase: true,
      require_numbers: true,
      require_special_chars: true,
    },

    // ロールベースアクセス制御
    roles: {
      admin: {
        permissions: ["read", "write", "delete", "manage_users", "view_analytics"],
        inherits: [],
      },
      moderator: {
        permissions: ["read", "write", "moderate", "view_reports"],
        inherits: [],
      },
      user: {
        permissions: ["read", "write", "comment"],
        inherits: [],
      },
      guest: {
        permissions: ["read"],
        inherits: [],
      },
    },
  },

  // 🗄️ データベース設定
  database: {
    type: "postgresql", // postgresql, mysql, sqlite, redis
    url: "postgresql://user:password@localhost/kotoba_web_app",
    max_connections: 10,
    min_connections: 1,
    connection_timeout: 30,
    command_timeout: 60,

    // マイグレーション
    migrations: [
      {
        version: "001",
        description: "Create users table",
        up: |||
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            role VARCHAR(20) DEFAULT 'user',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        |||,

        down: "DROP TABLE IF EXISTS users;",
      },
      {
        version: "002",
        description: "Create posts and comments tables",
        up: |||
          CREATE TABLE IF NOT EXISTS posts (
            id SERIAL PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            content TEXT,
            author_id INTEGER REFERENCES users(id),
            published BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS comments (
            id SERIAL PRIMARY KEY,
            content TEXT NOT NULL,
            post_id INTEGER REFERENCES posts(id),
            author_id INTEGER REFERENCES users(id),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        |||,

        down: |||
          DROP TABLE IF EXISTS comments;
          DROP TABLE IF EXISTS posts;
        |||,
      },
    ],
  },

  // 🎨 テンプレート設定
  templates: {
    engine: "tera", // tera, handlebars
    template_dir: "templates",
    cache_enabled: true,
    autoescape: true,

    // グローバルコンテキスト
    globals: {
      site_name: "Kotoba Web App",
      site_description: "Built with pure Jsonnet",
      current_year: std.toString(std.time() / 31536000 + 1970),
    },

    // カスタムフィルター
    filters: {
      markdown: "Convert markdown to HTML",
      truncate: "Truncate text to specified length",
      format_date: "Format timestamp to readable date",
    },
  },

  // 🚀 ルート定義（HTTPハンドラー）
  routes: {
    // ホームページ
    "GET /": {
      handler: "render_template",
      template: "home.html",
      context: {
        title: "Welcome to Kotoba Web App",
        featured_posts: "SELECT * FROM posts WHERE published = true ORDER BY created_at DESC LIMIT 5",
        recent_comments: "SELECT * FROM comments ORDER BY created_at DESC LIMIT 10",
      },
      middlewares: ["auth_optional", "rate_limit"],
    },

    // ユーザー認証
    "POST /auth/login": {
      handler: "auth_login",
      body_parser: "json",
      fields: ["username", "password"],
      middlewares: ["rate_limit"],
      rate_limit: { requests: 5, window_seconds: 300 }, // 5分間に5回
    },

    "POST /auth/register": {
      handler: "auth_register",
      body_parser: "json",
      fields: ["username", "email", "password", "confirm_password"],
      middlewares: ["rate_limit"],
    },

    "POST /auth/logout": {
      handler: "auth_logout",
      middlewares: ["auth_required"],
    },

    // ブログ投稿
    "GET /posts": {
      handler: "list_posts",
      query_params: {
        page: "integer default 1",
        limit: "integer default 10",
        published: "boolean default true",
      },
      middlewares: ["auth_optional"],
    },

    "POST /posts": {
      handler: "create_post",
      body_parser: "json",
      fields: ["title", "content"],
      middlewares: ["auth_required", "rate_limit"],
    },

    "GET /posts/:id": {
      handler: "get_post",
      params: { id: "integer" },
      template: "post_detail.html",
      middlewares: ["auth_optional"],
    },

    "PUT /posts/:id": {
      handler: "update_post",
      params: { id: "integer" },
      body_parser: "json",
      fields: ["title", "content", "published"],
      middlewares: ["auth_required", "ownership_required"],
    },

    "DELETE /posts/:id": {
      handler: "delete_post",
      params: { id: "integer" },
      middlewares: ["auth_required", "ownership_required"],
    },

    // APIエンドポイント
    "GET /api/posts": {
      handler: "api_list_posts",
      response_type: "json",
      middlewares: ["auth_optional"],
    },

    "GET /api/posts/:id": {
      handler: "api_get_post",
      params: { id: "integer" },
      response_type: "json",
      middlewares: ["auth_optional"],
    },

    "GET /api/users/:id": {
      handler: "api_get_user",
      params: { id: "integer" },
      response_type: "json",
      middlewares: ["auth_required"],
    },

    // 静的ファイル
    "GET /static/*": {
      handler: "serve_static",
      middlewares: ["cache"],
    },

    // 管理機能（管理者専用）
    "GET /admin": {
      handler: "admin_dashboard",
      template: "admin/dashboard.html",
      middlewares: ["auth_required", "role_required:admin"],
    },

    "GET /admin/users": {
      handler: "admin_users",
      template: "admin/users.html",
      middlewares: ["auth_required", "role_required:admin"],
    },

    "GET /admin/analytics": {
      handler: "admin_analytics",
      template: "admin/analytics.html",
      middlewares: ["auth_required", "role_required:admin"],
    },

    // エラーハンドラー
    "GET /404": {
      handler: "render_template",
      template: "errors/404.html",
      status_code: 404,
    },

    "GET /500": {
      handler: "render_template",
      template: "errors/500.html",
      status_code: 500,
    },
  },

  // 🛡️ ミドルウェア定義
  middlewares: {
    // 認証関連
    auth_required: {
      type: "auth",
      required: true,
      redirect_to: "/auth/login",
    },

    auth_optional: {
      type: "auth",
      required: false,
    },

    // 権限チェック
    role_required: {
      type: "authorization",
      role: "admin", // パラメータとして受け取る
    },

    ownership_required: {
      type: "ownership",
      resource_type: "post", // 動的に設定
      user_field: "author_id",
    },

    // レート制限
    rate_limit: {
      type: "rate_limit",
      requests: 100,
      window_seconds: 60,
      identifier: "ip", // ip, user, session
    },

    // CORS
    cors: {
      type: "cors",
      origins: ["http://localhost:3000", "https://example.com"],
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      headers: ["Content-Type", "Authorization"],
      credentials: true,
    },

    // キャッシュ
    cache: {
      type: "cache",
      strategy: "public", // public, private, no-cache
      max_age: 3600, // 1時間
    },

    // ログ
    logging: {
      type: "logging",
      level: "info", // debug, info, warn, error
      format: "json", // json, text
    },

    // リクエストボディパーサー
    json_parser: {
      type: "body_parser",
      content_type: "application/json",
      max_size: "10mb",
    },

    form_parser: {
      type: "body_parser",
      content_type: "application/x-www-form-urlencoded",
      max_size: "10mb",
    },
  },

  // 📊 ビジネスロジック（ハンドラー関数）
  handlers: {
    // 認証ハンドラー
    auth_login: {
      description: "ユーザーログイン処理",
      implementation: |||
        local user = database.query_single(
          "SELECT * FROM users WHERE username = $1 OR email = $1",
          [request.body.username]
        );

        if user == null then
          return { success: false, message: "Invalid credentials" }
        end;

        local password_valid = auth.verify_password(request.body.password, user.password_hash);
        if not password_valid then
          return { success: false, message: "Invalid credentials" }
        end;

        local token = auth.generate_jwt(user.id, user.role);
        return {
          success: true,
          token: token,
          user: {
            id: user.id,
            username: user.username,
            email: user.email,
            role: user.role
          }
        };
      |||,
    },

    auth_register: {
      description: "ユーザー登録処理",
      implementation: |||
        // パスワード強度チェック
        local password_check = auth.check_password_strength(request.body.password);
        if not password_check.strong then
          return { success: false, issues: password_check.issues }
        end;

        // パスワード確認チェック
        if request.body.password != request.body.confirm_password then
          return { success: false, message: "Passwords do not match" }
        end;

        // ユーザー名の重複チェック
        local existing_user = database.query_single(
          "SELECT id FROM users WHERE username = $1 OR email = $2",
          [request.body.username, request.body.email]
        );

        if existing_user != null then
          return { success: false, message: "Username or email already exists" }
        end;

        // パスワードハッシュ化
        local password_hash = auth.hash_password(request.body.password);

        // ユーザー作成
        local new_user = database.insert(
          "users",
          {
            username: request.body.username,
            email: request.body.email,
            password_hash: password_hash,
            role: "user"
          }
        );

        local token = auth.generate_jwt(new_user.id, "user");
        return {
          success: true,
          token: token,
          user: {
            id: new_user.id,
            username: new_user.username,
            email: new_user.email,
            role: "user"
          }
        };
      |||,
    },

    // 投稿関連ハンドラー
    create_post: {
      description: "新規投稿作成",
      implementation: |||
        local post_data = {
          title: request.body.title,
          content: request.body.content,
          author_id: session.user_id,
          published: false
        };

        local new_post = database.insert("posts", post_data);
        return { success: true, post: new_post };
      |||,
    },

    list_posts: {
      description: "投稿一覧取得",
      implementation: |||
        local page = std.parseInt(request.query.page or "1");
        local limit = std.parseInt(request.query.limit or "10");
        local offset = (page - 1) * limit;

        local published_filter = if request.query.published == "false" then "" else "WHERE published = true";

        local posts = database.query(
          "SELECT p.*, u.username as author_name FROM posts p " +
          "JOIN users u ON p.author_id = u.id " +
          published_filter +
          " ORDER BY p.created_at DESC LIMIT $1 OFFSET $2",
          [limit, offset]
        );

        local total = database.query_single(
          "SELECT COUNT(*) as count FROM posts " + published_filter,
          []
        );

        return {
          posts: posts,
          pagination: {
            page: page,
            limit: limit,
            total: total.count,
            total_pages: std.ceil(total.count / limit)
          }
        };
      |||,
    },

    // APIハンドラー
    api_list_posts: {
      description: "JSON API形式での投稿一覧",
      implementation: |||
        local posts = handlers.list_posts();
        return posts;
      |||,
    },
  },

  // 🎨 ビュー/テンプレート
  views: {
    // レイアウト
    layouts: {
      default: {
        template: |||
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{{ title }} - {{ globals.site_name }}</title>
            <link rel="stylesheet" href="/static/css/style.css">
            <script src="/static/js/app.js" defer></script>
          </head>
          <body>
            <nav class="navbar">
              <div class="container">
                <a href="/" class="navbar-brand">{{ globals.site_name }}</a>
                <div class="navbar-nav">
                  <a href="/">Home</a>
                  <a href="/posts">Posts</a>
                  {% if user %}
                    <a href="/profile">{{ user.username }}</a>
                    <a href="/auth/logout">Logout</a>
                  {% else %}
                    <a href="/auth/login">Login</a>
                    <a href="/auth/register">Register</a>
                  {% endif %}
                </div>
              </div>
            </nav>

            <main class="container">
              {% block content %}{% endblock %}
            </main>

            <footer class="footer">
              <div class="container">
                <p>&copy; {{ globals.current_year }} {{ globals.site_name }}. Built with Kotoba.</p>
              </div>
            </footer>
          </body>
          </html>
        |||
      }
    },

    // ページテンプレート
    pages: {
      home: {
        extends: "default",
        content: |||
          {% block content %}
          <div class="hero">
            <h1>Welcome to {{ globals.site_name }}</h1>
            <p>{{ globals.site_description }}</p>
          </div>

          <div class="featured-posts">
            <h2>Latest Posts</h2>
            {% for post in featured_posts %}
            <article class="post-card">
              <h3><a href="/posts/{{ post.id }}">{{ post.title }}</a></h3>
              <p>By {{ post.author_name }} on {{ post.created_at | format_date }}</p>
              <p>{{ post.content | truncate: 150 }}</p>
            </article>
            {% endfor %}
          </div>
          {% endblock %}
        |||
      },

      post_detail: {
        extends: "default",
        content: |||
          {% block content %}
          <article class="post">
            <h1>{{ post.title }}</h1>
            <div class="post-meta">
              <span>By {{ post.author_name }}</span>
              <span>{{ post.created_at | format_date }}</span>
              {% if post.published %}
                <span class="published">Published</span>
              {% else %}
                <span class="draft">Draft</span>
              {% endif %}
            </div>
            <div class="post-content">
              {{ post.content | markdown }}
            </div>
          </article>

          <section class="comments">
            <h2>Comments</h2>
            {% for comment in post.comments %}
            <div class="comment">
              <div class="comment-meta">
                <span>{{ comment.author_name }}</span>
                <span>{{ comment.created_at | format_date }}</span>
              </div>
              <div class="comment-content">
                {{ comment.content }}
              </div>
            </div>
            {% endfor %}

            {% if user %}
            <form action="/posts/{{ post.id }}/comments" method="POST" class="comment-form">
              <textarea name="content" placeholder="Write a comment..." required></textarea>
              <button type="submit">Post Comment</button>
            </form>
            {% endif %}
          </section>
          {% endblock %}
        |||
      }
    }
  },

  // ⚙️ 設定・構成
  settings: {
    // 開発環境設定
    development: {
      debug_mode: true,
      log_level: "debug",
      auto_reload: true,
      database_url: "postgresql://dev:dev@localhost/kotoba_dev",
    },

    // 本番環境設定
    production: {
      debug_mode: false,
      log_level: "info",
      auto_reload: false,
      database_url: "postgresql://prod:prod@db.example.com/kotoba_prod",
    },

    // テスト環境設定
    test: {
      debug_mode: true,
      log_level: "debug",
      auto_reload: false,
      database_url: "postgresql://test:test@localhost/kotoba_test",
    },
  },

  // 📈 デプロイメント設定
  deployment: {
    // 開発環境
    development: {
      provider: "local",
      port: 3000,
      host: "127.0.0.1",
    },

    // 本番環境
    production: {
      provider: "docker",
      image: "kotoba-web-app:latest",
      ports: ["80:3000"],
      environment: {
        NODE_ENV: "production",
        DATABASE_URL: "{{ settings.production.database_url }}",
      },
    },

    // クラウドデプロイ
    cloud: {
      provider: "kubernetes",
      replicas: 3,
      resources: {
        requests: {
          memory: "256Mi",
          cpu: "100m"
        },
        limits: {
          memory: "512Mi",
          cpu: "500m"
        }
      },
    },
  },

  // 🧪 テスト設定
  tests: {
    unit_tests: [
      {
        name: "User registration validation",
        description: "Test user registration with various inputs",
        test_cases: [
          {
            input: { username: "test", email: "test@example.com", password: "Password123!" },
            expected: { success: true }
          },
          {
            input: { username: "", email: "invalid", password: "weak" },
            expected: { success: false, issues: ["Username required", "Invalid email", "Password too weak"] }
          }
        ]
      }
    ],

    integration_tests: [
      {
        name: "Full user registration flow",
        description: "Test complete registration and login flow",
        steps: [
          "Register new user",
          "Verify email (mock)",
          "Login with credentials",
          "Access protected resource",
          "Logout"
        ]
      }
    ],

    performance_tests: [
      {
        name: "Concurrent user load",
        description: "Test application performance under load",
        config: {
          concurrent_users: 100,
          duration_seconds: 60,
          ramp_up_seconds: 10,
        }
      }
    ]
  }
}
