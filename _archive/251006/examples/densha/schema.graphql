# GraphQL Schema for Densha TODO App
# Demonstrates graph database relationships and queries

type Query {
  # Todo queries
  todos(status: TodoStatus, priority: Priority, limit: Int = 20, offset: Int = 0): [Todo!]!
  todo(id: ID!): Todo
  todosByCategory(categoryId: ID!): [Todo!]!
  todosByTag(tagId: ID!): [Todo!]!
  searchTodos(query: String!): [Todo!]!

  # Graph relationship queries
  todoDependencies(todoId: ID!): [TodoRelationship!]!
  todoDependents(todoId: ID!): [TodoRelationship!]!
  shortestPath(fromId: ID!, toId: ID!): TodoPath

  # User queries
  me: User!
  users: [User!]!

  # Category and Tag queries
  categories: [Category!]!
  tags: [Tag!]!
}

type Mutation {
  # Todo mutations
  createTodo(input: CreateTodoInput!): Todo!
  updateTodo(id: ID!, input: UpdateTodoInput!): Todo!
  deleteTodo(id: ID!): Boolean!
  toggleTodo(id: ID!): Todo!

  # Relationship mutations
  addDependency(fromId: ID!, toId: ID!, relationshipType: RelationshipType!): TodoRelationship!
  removeDependency(fromId: ID!, toId: ID!): Boolean!

  # Category and Tag mutations
  createCategory(input: CreateCategoryInput!): Category!
  createTag(input: CreateTagInput!): Tag!
}

type Subscription {
  todoCreated: Todo!
  todoUpdated: Todo!
  todoDeleted: Todo!
  todoToggled(id: ID!): Todo!
}

# Core Types
type Todo {
  id: ID!
  title: String!
  description: String
  completed: Boolean!
  priority: Priority!
  dueDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  category: Category
  tags: [Tag!]!

  # Graph relationships
  dependencies: [TodoRelationship!]!
  dependents: [TodoRelationship!]!
  blocking: [TodoRelationship!]!
  blockedBy: [TodoRelationship!]!
}

type User {
  id: ID!
  email: String!
  name: String!
  locale: Locale!
  createdAt: DateTime!
  lastLogin: DateTime
  todos(status: TodoStatus, limit: Int = 20): [Todo!]!
  categories: [Category!]!
}

type Category {
  id: ID!
  name: String!
  color: String!
  user: User!
  todos: [Todo!]!
  todoCount: Int!
}

type Tag {
  id: ID!
  name: String!
  color: String!
  todos: [Todo!]!
  todoCount: Int!
}

# Relationship Types
type TodoRelationship {
  id: ID!
  from: Todo!
  to: Todo!
  type: RelationshipType!
  strength: Float
  reason: String
  createdAt: DateTime!
}

type TodoPath {
  nodes: [Todo!]!
  relationships: [TodoRelationship!]!
  length: Int!
}

# Input Types
input CreateTodoInput {
  title: String!
  description: String
  priority: Priority = MEDIUM
  dueDate: DateTime
  categoryId: ID
  tagIds: [ID!]
}

input UpdateTodoInput {
  title: String
  description: String
  priority: Priority
  dueDate: DateTime
  categoryId: ID
  tagIds: [ID!]
}

input CreateCategoryInput {
  name: String!
  color: String
}

input CreateTagInput {
  name: String!
  color: String
}

# Enums
enum TodoStatus {
  PENDING
  COMPLETED
  ALL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RelationshipType {
  DEPENDS_ON
  BLOCKS
  RELATED_TO
}

enum Locale {
  EN
  JA
  ES
  FR
  DE
}

# Custom Scalars
scalar DateTime

# Example Queries
extend type Query {
  # Complex graph queries
  criticalPath(projectId: ID!): TodoPath
  todosByPriorityChain(rootId: ID!, maxDepth: Int = 5): [Todo!]!
  circularDependencies: [TodoCycle!]!
}

type TodoCycle {
  todos: [Todo!]!
  relationships: [TodoRelationship!]!
}

# Example Mutations for bulk operations
extend type Mutation {
  bulkUpdateTodos(ids: [ID!]!, input: UpdateTodoInput!): [Todo!]!
  reorderTodos(ids: [ID!]!): Boolean!
}
