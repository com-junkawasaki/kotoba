// Kotoba Capabilities Example - 機能ベースセキュリティの実装
// このファイルはDenoに似たcapability概念をKotobaで実装する方法を示します

{
  // セキュリティ設定（拡張）
  security: {
    jwt: {
      algorithm: "HS256",
      secret: "demo-capability-jwt-secret-key",
      issuer: "kotoba-capabilities-demo",
      audience: ["demo-apps"],
      access_token_expiration: 900,
      refresh_token_expiration: 3600,
    },

    // 機能ベースセキュリティ設定
    capabilities: {
      enable_logging: true,
      enable_auditing: true,
      default_attenuation: [
        {
          resource_type: "Graph",
          action: "Write",
          scope: "owned:*"
        }
      ]
    }
  },

  // プリンシパル（ユーザー/サービス）の定義と機能付与
  principals: [
    // 管理者プリンシパル - すべての機能を持つ
    {
      id: "admin-user",
      name: "Administrator",
      type: "user",
      capabilities: [
        {
          resource_type: "Graph",
          action: "Read",
          scope: "*"  // すべてのグラフデータにアクセス可能
        },
        {
          resource_type: "Graph",
          action: "Write",
          scope: "*"
        },
        {
          resource_type: "Graph",
          action: "Delete",
          scope: "*"
        },
        {
          resource_type: "User",
          action: "Admin",
          scope: "*"
        },
        {
          resource_type: "Admin",
          action: "Admin",
          scope: "*"
        }
      ],
      metadata: {
        description: "System administrator with full access",
        department: "IT",
        clearance_level: "top_secret"
      }
    },

    // コンテンツ作成者プリンシパル
    {
      id: "content-creator",
      name: "Content Creator",
      type: "user",
      capabilities: [
        {
          resource_type: "Graph",
          action: "Read",
          scope: "posts:*"
        },
        {
          resource_type: "Graph",
          action: "Write",
          scope: "posts:owned"
        },
        {
          resource_type: "Graph",
          action: "Create",
          scope: "posts:*"
        },
        {
          resource_type: "FileSystem",
          action: "Read",
          scope: "/uploads/*"
        },
        {
          resource_type: "FileSystem",
          action: "Write",
          scope: "/uploads/owned/*"
        }
      ],
      metadata: {
        description: "User who can create and manage content",
        role: "creator",
        quota: "100MB"
      }
    },

    // 読み取り専用アナリストプリンシパル
    {
      id: "analyst",
      name: "Data Analyst",
      type: "user",
      capabilities: [
        {
          resource_type: "Graph",
          action: "Read",
          scope: "analytics:*"
        },
        {
          resource_type: "Query",
          action: "Execute",
          scope: "read_only"
        }
      ],
      metadata: {
        description: "Read-only access for data analysis",
        role: "analyst",
        query_limit: 1000
      }
    },

    // APIサービスプリンシパル
    {
      id: "api-service",
      name: "API Service",
      type: "service",
      capabilities: [
        {
          resource_type: "Graph",
          action: "Read",
          scope: "public:*"
        },
        {
          resource_type: "Network",
          action: "Read",
          scope: "api:*"
        },
        {
          resource_type: "Network",
          action: "Write",
          scope: "api:responses"
        }
      ],
      metadata: {
        description: "API service with limited network and data access",
        service_type: "rest_api",
        rate_limit: "1000/minute"
      }
    }
  ],

  // 機能セットのプリセット定義
  capability_presets: {
    // 読み取り専用プリセット
    readonly: [
      {
        resource_type: "Graph",
        action: "Read",
        scope: "*"
      },
      {
        resource_type: "Query",
        action: "Execute",
        scope: "read_only"
      }
    ],

    // 読み取り・書き込みプリセット
    readwrite: [
      {
        resource_type: "Graph",
        action: "Read",
        scope: "*"
      },
      {
        resource_type: "Graph",
        action: "Write",
        scope: "owned:*"
      },
      {
        resource_type: "Graph",
        action: "Create",
        scope: "*"
      },
      {
        resource_type: "Graph",
        action: "Update",
        scope: "owned:*"
      },
      {
        resource_type: "Query",
        action: "Execute",
        scope: "*"
      }
    ],

    // 管理者プリセット
    admin: [
      {
        resource_type: "Graph",
        action: "Read",
        scope: "*"
      },
      {
        resource_type: "Graph",
        action: "Write",
        scope: "*"
      },
      {
        resource_type: "Graph",
        action: "Delete",
        scope: "*"
      },
      {
        resource_type: "Graph",
        action: "Create",
        scope: "*"
      },
      {
        resource_type: "Graph",
        action: "Update",
        scope: "*"
      },
      {
        resource_type: "User",
        action: "Admin",
        scope: "*"
      },
      {
        resource_type: "Admin",
        action: "Admin",
        scope: "*"
      },
      {
        resource_type: "Query",
        action: "Execute",
        scope: "*"
      }
    ]
  },

  // リソース定義
  resources: [
    {
      type: "graph",
      id: "users",
      actions: ["Read", "Write", "Create", "Update"],
      scopes: ["*", "owned:*", "public:*"],
      metadata: {
        description: "User data graph",
        sensitivity: "high"
      }
    },
    {
      type: "graph",
      id: "posts",
      actions: ["Read", "Write", "Create", "Update", "Delete"],
      scopes: ["*", "owned:*", "public:*", "draft:*"],
      metadata: {
        description: "Content posts graph",
        sensitivity: "medium"
      }
    },
    {
      type: "filesystem",
      id: "uploads",
      actions: ["Read", "Write", "Create"],
      scopes: ["*", "owned:*", "/uploads/*"],
      metadata: {
        description: "File upload directory",
        max_size: "1GB"
      }
    },
    {
      type: "query",
      id: "analytics",
      actions: ["Execute"],
      scopes: ["read_only", "full"],
      metadata: {
        description: "Analytics query execution",
        timeout: "30s"
      }
    }
  ],

  // 機能減衰（attenuation）ルール
  attenuation_rules: [
    // 管理者機能を減衰させて安全な操作用機能を作成
    {
      name: "safe_admin",
      source_preset: "admin",
      restrictions: [
        {
          resource_type: "Graph",
          action: "Delete",
          scope: "system:*"  // システムデータを削除できない
        },
        {
          resource_type: "User",
          action: "Admin",
          scope: "admin:*"  // 管理者ユーザーを操作できない
        }
      ],
      metadata: {
        description: "Admin capabilities with safety restrictions"
      }
    },

    // 外部API呼び出し用の制限されたネットワーク機能
    {
      name: "api_client",
      source_preset: "readwrite",
      restrictions: [
        {
          resource_type: "Network",
          action: "Read",
          scope: "internal:*"  // 内部ネットワークにアクセスできない
        },
        {
          resource_type: "Network",
          action: "Write",
          scope: "admin:*"  // 管理者エンドポイントに書き込めない
        }
      ],
      metadata: {
        description: "Network capabilities for external API calls"
      }
    }
  ],

  // ポリシー定義
  policies: [
    {
      name: "user_data_protection",
      description: "Ensure users can only access their own data",
      rules: [
        {
          principal_pattern: "user:*",
          resource_pattern: "graph:users",
          action_pattern: "Write",
          scope_restriction: "owned:*",
          effect: "allow"
        },
        {
          principal_pattern: "user:*",
          resource_pattern: "graph:users",
          action_pattern: "Read",
          scope_restriction: "owned:*|public:*",
          effect: "allow"
        }
      ]
    },

    {
      name: "service_isolation",
      description: "Services can only access public data and their own resources",
      rules: [
        {
          principal_pattern: "service:*",
          resource_pattern: "*",
          action_pattern: "*",
          scope_restriction: "public:*",
          effect: "allow"
        }
      ]
    }
  ],

  // 監査設定
  audit: {
    enabled: true,
    log_capability_checks: true,
    log_capability_grants: true,
    log_capability_revokes: true,
    retention_days: 90,
    sensitive_actions: ["Delete", "Admin"],
    alert_on_suspicious_patterns: true
  },

  // 設定検証
  validateConfig():: {
    local config = self,
    local errors = [],

    // プリンシパル検証
    if !std.objectHas(config, "principals") then
      errors = errors + ["principalsが定義されていません"]
    else if std.length(config.principals) == 0 then
      errors = errors + ["少なくとも1つのプリンシパルを定義してください"]
    ,

    // 各プリンシパルの検証
    if std.objectHas(config, "principals") then
      for principal in config.principals {
        if !std.objectHas(principal, "id") then
          errors = errors + ["プリンシパルにidがありません: " + principal.name]
        ,
        if !std.objectHas(principal, "capabilities") then
          errors = errors + ["プリンシパルにcapabilitiesがありません: " + principal.id]
        ,
        if std.objectHas(principal, "capabilities") && std.length(principal.capabilities) == 0 then
          errors = errors + ["プリンシパルに空のcapabilitiesがあります: " + principal.id]
        ,
      }
    ,

    // リソース検証
    if std.objectHas(config, "resources") then
      for resource in config.resources {
        if !std.objectHas(resource, "type") then
          errors = errors + ["リソースにtypeがありません"]
        ,
        if !std.objectHas(resource, "actions") then
          errors = errors + ["リソースにactionsがありません: " + resource.id]
        ,
      }
    ,

    if std.length(errors) == 0 then
      "設定は有効です"
    else
      "設定エラー: " + std.join(", ", errors)
  },

  // 機能サマリー
  capabilitySummary:: {
    principals: std.length(self.principals),
    resources: std.length(self.resources),
    policies: std.length(self.policies),
    presets: std.length(self.capability_presets),
    attenuation_rules: std.length(self.attenuation_rules),

    // プリンシパル別の機能数
    capabilities_per_principal: {
      [principal.id]: std.length(principal.capabilities)
      for principal in self.principals
    },

    // リソース別のアクション数
    actions_per_resource: {
      [resource.id]: std.length(resource.actions)
      for resource in self.resources
    },

    // 最も権限のあるプリンシパル
    most_privileged_principal: std.max(std.map(function(p) std.length(p.capabilities), self.principals)),
  }
}
