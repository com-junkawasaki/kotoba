// Cluster communication protocol for KotobaDB
syntax = "proto3";

package cluster;

// Node identification
message NodeId {
  string id = 1;
  string address = 2;
  uint32 port = 3;
  NodeRole role = 4;
  uint64 term = 5;
}

enum NodeRole {
  FOLLOWER = 0;
  CANDIDATE = 1;
  LEADER = 2;
}

// Cluster membership
message ClusterConfig {
  repeated NodeId nodes = 1;
  uint64 version = 2;
}

// Log entry for consensus
message LogEntry {
  uint64 index = 1;
  uint64 term = 2;
  Operation operation = 3;
  string client_id = 4;
  uint64 request_id = 5;
}

// Database operations
message Operation {
  oneof operation {
    CreateNode create_node = 1;
    UpdateNode update_node = 2;
    DeleteNode delete_node = 3;
    CreateEdge create_edge = 4;
    UpdateEdge update_edge = 5;
    DeleteEdge delete_edge = 6;
  }
}

message CreateNode {
  map<string, Value> properties = 1;
}

message UpdateNode {
  string cid = 1;
  map<string, Value> properties = 2;
}

message DeleteNode {
  string cid = 1;
}

message CreateEdge {
  string source_cid = 1;
  string target_cid = 2;
  map<string, Value> properties = 3;
}

message UpdateEdge {
  string cid = 1;
  map<string, Value> properties = 2;
}

message DeleteEdge {
  string cid = 1;
}

// Generic value types
message Value {
  oneof value {
    string string_value = 1;
    int64 int_value = 2;
    double float_value = 3;
    bool bool_value = 4;
    bytes bytes_value = 5;
    string link_value = 6;  // CID as string
  }
}

// Consensus messages
message VoteRequest {
  uint64 term = 1;
  string candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

message VoteResponse {
  uint64 term = 1;
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  uint64 term = 1;
  string leader_id = 2;
  uint64 prev_log_index = 3;
  uint64 prev_log_term = 4;
  repeated LogEntry entries = 5;
  uint64 leader_commit = 6;
}

message AppendEntriesResponse {
  uint64 term = 1;
  bool success = 2;
  uint64 match_index = 3;
}

// Heartbeat and status
message HeartbeatRequest {
  string from_node = 1;
  uint64 timestamp = 2;
}

message HeartbeatResponse {
  string node_id = 1;
  NodeRole role = 2;
  uint64 last_log_index = 3;
  uint64 commit_index = 4;
}

// Client requests
message ClientRequest {
  string client_id = 1;
  uint64 request_id = 2;
  Operation operation = 3;
}

message ClientResponse {
  string client_id = 1;
  uint64 request_id = 2;
  bool success = 3;
  string error_message = 4;
  string result_cid = 5;
}

// Cluster management
service ClusterService {
  // Consensus
  rpc RequestVote(VoteRequest) returns (VoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // Heartbeat
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Client operations
  rpc ExecuteOperation(ClientRequest) returns (ClientResponse);

  // Cluster management
  rpc JoinCluster(NodeId) returns (ClusterConfig);
  rpc LeaveCluster(NodeId) returns (ClusterConfig);
  rpc GetClusterConfig(Empty) returns (ClusterConfig);
}

// Empty message for requests without parameters
message Empty {}
